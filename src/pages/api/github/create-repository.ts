import { NextApiRequest, NextApiResponse } from 'next';
import { Octokit } from '@octokit/rest';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  try {
    const { GITHUB_TOKEN } = process.env;
    if (!GITHUB_TOKEN) {
      throw new Error('GitHub token not configured');
    }

    const octokit = new Octokit({ auth: GITHUB_TOKEN });
    const { nodes, connections, metadata } = req.body;

    // Create repository
    const repo = await octokit.repos.createForAuthenticatedUser({
      name: metadata.name,
      description: 'Tech stack graph generated by Stack Flow Builder',
      private: false,
      auto_init: true,
    });

    // Create README.md with graph information
    await octokit.repos.createOrUpdateFileContents({
      owner: repo.data.owner.login,
      repo: repo.data.name,
      path: 'README.md',
      message: 'Initial commit with tech stack graph',
      content: Buffer.from(`
# ${metadata.name}

This repository was generated using Stack Flow Builder.

## Tech Stack

${nodes.map((node: any) => `- ${node.data.label} (${node.data.type})`).join('\n')}

## Connections

${connections.map((conn: any) => `- ${conn.nodes[0]} â†” ${conn.nodes[1]}`).join('\n')}

## Generated on

${new Date(metadata.created).toLocaleString()}
      `).toString('base64'),
    });

    return res.status(200).json(repo.data);
  } catch (error) {
    console.error('Error creating repository:', error);
    return res.status(500).json({ message: 'Failed to create repository' });
  }
} 